{"version":3,"sources":["app.js","aurelia-api-dreamfactory-session-test.js","aurelia-api-test.js","authConfig.js","dreamfactory-api.js","dreamfactoryconfig.js","dreamfactorytestconnection.js","environment.js","main.js","utils.js","welcome.js","resources/index.js"],"names":["App","configureRouter","config","router","title","map","route","name","moduleId","nav","AurelaiApiDreamfactorySessionTest","of","api","authService","gotdata","authenticated","isAuthenticated","sessionid","getAccessToken","activate","undefined","find","then","JSON","stringify","customers","resource","AurelaiApiTest","username","login","credentials","response","console","log","catch","logout","endpoint","loginUrl","configureEndpoints","accessTokenProp","accessTokenName","loginRedirect","httpClient","configure","useStandardConfiguration","DreamFactoryApi","http","fetch","loginurl","method","headers","Headers","APP_NAME","body","json","data","hasOwnProperty","setToken","tokenKey","session_token","getdata","token","getToken","dataurl","APP_API_KEY","INSTANCE_URL","email","password","db","service","serviceObject","overrideMethod","database","DreamFactoryTestConnection","dfapi","session_id","length","debug","testing","Promise","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","plugin","registerEndpoint","baseConfig","developmentLogging","start","setRoot","Utils","key","value","sessionStorage","setItem","getItem","removeToken","$","success","removeItem","parseResponse","messageBox","code","message","error","Welcome","heading","firstName","lastName","previousValue","fullName","submit","alert","canDeactivate","confirm","UpperValueConverter","toView","toUpperCase"],"mappings":"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","file":"app-bundle.js","sourcesContent":["export class App {\n  configureRouter(config, router) {\n    config.title = 'Aurelia';\n    config.map([\n      { route: ['', 'welcome'], name: 'welcome',      moduleId: 'welcome',      nav: true, title: 'Welcome' },\n      { route: 'aurelia-api-test', name: 'aurelia-api-test', moduleId: 'aurelia-api-test', nav: true, title: 'Api-Auth Plugin' },\n      { route: 'aurelia-api-dreamfactory-session-test', name: 'aurelia-api-dreamfactory-session-test', moduleId: 'aurelia-api-dreamfactory-session-test', nav: true, title: 'Api-Auth Plugin Dreamfactory Session Test' },\n      { route: 'dreamfactorytestconnection', name: 'dreamfactorytestconnection', moduleId: 'dreamfactorytestconnection', nav: true, title: 'Test DreamFactory Connection' }\n    ]);\n    this.router = router;\n  }\n}\n","import {Endpoint} from 'aurelia-api';\nimport {AuthService} from 'aurelia-authentication';\nimport {inject} from 'aurelia-framework';\n\n\n@inject(Endpoint.of('api'),AuthService)\nexport class AurelaiApiDreamfactorySessionTest{\n  constructor(api,authService) {\n    this.api = api;\n    this.gotdata = null;\n    this.authenticated = authService.isAuthenticated();\n    this.sessionid = authService.getAccessToken()\n  }\n  activate() {\n    if (this.sessionid != undefined) {\n    return this.api.find('customers')\n      .then(customers => this.gotdata = JSON.stringify(customers.resource[0]));\n  }\n  }\n}\n\n","import {AuthService} from 'aurelia-authentication';\nimport {Endpoint} from 'aurelia-api';\nimport {inject, computedFrom} from 'aurelia-framework';\nimport dfconfig from './dreamfactoryconfig';\n\n@inject(AuthService,Endpoint.of('api'))\nexport class AurelaiApiTest {\n  constructor(authService,api) {\n    this.api = api;\n    this.authService = authService;\n    this.username = null;\n    this.gotdata = null;\n    this.api = api;\n    this.authService.login(dfconfig.credentials())\n      .then(response => {\n        this.username = response.name;\n        console.log(\"success logged \" + response);\n      })\n      .catch(err => {\n        console.log(\"login failure\");\n      });\n  };\n\n\n  // make a getter to get the authentication status.\n  // use computedFrom to avoid dirty checking\n  @computedFrom('authService.authenticated')\n  get authenticated() {\n    return this.authService.authenticated;\n  }\n  logout() {\n    return this.authService.logout();\n  }\n\nactivate(){\n  return this.api.find('customers')\n    .then(customers => this.gotdata = JSON.stringify(customers.resource[0]));\n}\n}\n","export default {\n  endpoint: 'auth',\n  loginUrl:'',\n  configureEndpoints: ['auth', 'api'],\n  accessTokenProp: 'session_token',\n  accessTokenName:'token',\n  loginRedirect : ''\n};\n","import {HttpClient, json} from 'aurelia-fetch-client';\r\nimport {inject} from 'aurelia-framework';\r\nimport {Utils} from './utils';\r\nimport  dreamfactoryconfig from './dreamfactoryconfig'\r\n\r\n\r\nlet httpClient = new HttpClient();\r\nhttpClient.configure(config => {\r\n  config\r\n    .useStandardConfiguration()\r\n});\r\n\r\n@inject(HttpClient)\r\nexport class DreamFactoryApi {\r\n  constructor(http) {\r\n    this.http = http;\r\n  }\r\n\r\n  login() {\r\n    return this.http.fetch(dreamfactoryconfig.loginurl(), {\r\n      method: \"POST\",\r\n      headers: new Headers({\r\n        \"X-DreamFactory-API-Key\": dreamfactoryconfig.APP_NAME\r\n      }),\r\n\r\n      body: json(dreamfactoryconfig.credentials())\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data.hasOwnProperty('session_token')) {\r\n          Utils.setToken(dreamfactoryconfig.tokenKey, data.session_token);\r\n          return data\r\n        }\r\n      });\r\n  }\r\n\r\n\r\n  getdata() {\r\n    let token = Utils.getToken(dreamfactoryconfig.tokenKey);\r\n\r\n    return this.http.fetch(dreamfactoryconfig.dataurl(), {\r\n      method: \"POST\",\r\n      headers: new Headers({\r\n      \"X-DreamFactory-API-Key\": dreamfactoryconfig.APP_API_KEY,\r\n        \"X-DreamFactory-Application-Name\": dreamfactoryconfig.APP_NAME,\r\n        \"X-DreamFactory-Session-Token\": token\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        return data;\r\n      })\r\n  }\r\n}\r\n\r\n// login() {\r\n//   return this.http.fetch(dreamfactoryconfig.loginurl(), {\r\n//     method: \"POST\",\r\n//     body: json(dreamfactoryconfig.credentials())\r\n//   })\r\n//     .then(response => response.json())\r\n//     .then(data => {\r\n//       if (data.hasOwnProperty('session_token')) {\r\n//         Utils.setToken(dreamfactoryconfig.tokenKey, data.session_token);\r\n//         return true\r\n//       } else {\r\n//         return false\r\n//       }\r\n//     });\r\n// }\r\n","export default {\n  //--------------------------------------------------------------------------\n//  DreamFactory 2.0 instance specific constants\n//--------------------------------------------------------------------------\n  INSTANCE_URL:'https://api.ageektech.com',\n  APP_API_KEY: '1fd07b6f9a10b16602189d794db0abe8a44108d8da59a83a9f5ab46d00132692',\n  APP_NAME: 'northwind-app',\n  email:'dftester@ageektech.com',\n  password: 'test12345',\n  api: '/api/v2/',\n  db:'northwind/',\n  service:'_table/',\n  serviceObject:'customers',\n  tokenKey: 'token',\n  overrideMethod:'?method=GET',\n  dataurl: function () {\n  return this.INSTANCE_URL + this.api + this.db + this.service + this.serviceObject + this.overrideMethod;\n},\n  database: function () {\n    return this.INSTANCE_URL + this.api + this.db + this.service;\n  },\n  loginurl: function () {\n    return this.INSTANCE_URL + '/api/v2/user/session'\n  },\n  credentials: function () {\n    return {email:this.email, password:this.password}\n  }\n};\n","import {inject} from 'aurelia-framework'\r\nimport {DreamFactoryApi} from './dreamfactory-api'\r\n\r\n@inject(DreamFactoryApi)\r\nexport class DreamFactoryTestConnection {\r\n  constructor(dfapi) {\r\n    this.dfapi = dfapi;\r\n    this.username = null;\r\n    this.gotdata = null;\r\n\r\n    this.dfapi.login().then(response => {\r\n      if (response.session_id) {\r\n        this.username = response.name;\r\n\r\n        this.dfapi.getdata().then(response => {\r\n          if (response.resource.length > 0) {\r\n            this.gotdata = JSON.stringify(response.resource[0])\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n// load(){\r\n//   this.dfapi.login().then(response => {\r\n//     this.username = response.name\r\n//     if (this.username){\r\n//       this.dfapi.getdata().then(response => {\r\n//         this.customers = response.resource\r\n//       })\r\n//     }\r\n//   })\r\n// }\r\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\nimport dfconfig from './dreamfactoryconfig'\nimport authConfig from './authConfig';\n\n\n//Configure Bluebird Promises.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources')\n    .plugin('aurelia-api', config => {\n      config.registerEndpoint('auth',dfconfig.loginurl() );\n      config.registerEndpoint('api',dfconfig.database(),{headers: {\"X-DreamFactory-API-Key\": dfconfig.APP_API_KEY, \"X-DreamFactory-Application-Name\": dfconfig.APP_NAME}});\n    })\n.plugin('aurelia-authentication', baseConfig => {\n    baseConfig.configure(authConfig);\n  });\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n\n\n\n// For non guest\n// config.registerEndpoint('auth',dfconfig.loginurl(),{headers: { \"X-DreamFactory-Application-Name\": dfconfig.APP_NAME}});\n// config.registerEndpoint('api',dfconfig.database(),{headers: { \"X-DreamFactory-Session-Token\": dfconfig.APP_API_KEY}});\n//\n\n// For geuet acess you just need\n//config.registerEndpoint('api',dfconfig.database(),{headers: {\"X-DreamFactory-API-Key\": dfconfig.APP_API_KEY, \"X-DreamFactory-Application-Name\": dfconfig.APP_NAME}});\n// No login or session needed\n\n// Example:\n// export function configure(aurelia) {\n//   aurelia.use\n//     .standardConfiguration()\n//     .feature('resources')\n//     .plugin('aurelia-api', config => {\n//       //config.registerEndpoint('auth',dfconfig.loginurl() )\n//       config.registerEndpoint('api',dfconfig.database(),{headers: {\"X-DreamFactory-API-Key\": dfconfig.APP_API_KEY, \"X-DreamFactory-Application-Name\": dfconfig.APP_NAME}});\n//     })\n//\n//   if (environment.debug) {\n//     aurelia.use.developmentLogging();\n//   }\n//\n//   if (environment.testing) {\n//     aurelia.use.plugin('aurelia-testing');\n//   }\n//\n//   aurelia.start().then(() => aurelia.setRoot());\n// }\n","//--------------------------------------------------------------------------\r\n//  Misc functions\r\n//--------------------------------------------------------------------------\r\nexport class Utils {\r\n\r\n  static setToken(key, value) {\r\n    sessionStorage.setItem(key, value);\r\n  }\r\n\r\n  static getToken(key) {\r\n    return sessionStorage.getItem(key);\r\n  }\r\n  removeToken(key) {\r\n    $.api.logout(function (data) {\r\n      if (data.success) {\r\n        sessionStorage.removeItem(key);\r\n        // $.route('index');\r\n      }\r\n      else {\r\n        let response = parseResponse(data);\r\n        messageBox(response.code, response.message, response.error);\r\n      }\r\n    });\r\n  }\r\n}\r\n","//import {computedFrom} from 'aurelia-framework';\r\n\r\nexport class Welcome {\r\n  heading = 'Welcome to the Aurelia Navigation App!';\r\n  firstName = 'John';\r\n  lastName = 'Doe';\r\n  previousValue = this.fullName;\r\n\r\n  //Getters can't be directly observed, so they must be dirty checked.\r\n  //However, if you tell Aurelia the dependencies, it no longer needs to dirty check the property.\r\n  //To optimize by declaring the properties that this getter is computed from, uncomment the line below\r\n  //as well as the corresponding import above.\r\n  //@computedFrom('firstName', 'lastName')\r\n  get fullName() {\r\n    return `${this.firstName} ${this.lastName}`;\r\n  }\r\n\r\n  submit() {\r\n    this.previousValue = this.fullName;\r\n    alert(`Welcome, ${this.fullName}!`);\r\n  }\r\n\r\n  canDeactivate() {\r\n    if (this.fullName !== this.previousValue) {\r\n      return confirm('Are you sure you want to leave?');\r\n    }\r\n  }\r\n}\r\n\r\nexport class UpperValueConverter {\r\n  toView(value) {\r\n    return value && value.toUpperCase();\r\n  }\r\n}\r\n","export function configure(config) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":"../src"}